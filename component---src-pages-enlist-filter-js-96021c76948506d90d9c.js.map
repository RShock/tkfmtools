{"version":3,"sources":["webpack://tkfmtools/./src/components/Card.js","webpack://tkfmtools/./src/components/CharCard.js","webpack://tkfmtools/./src/components/ResultTablePanel.js","webpack://tkfmtools/./src/components/recruitment-filter/table-head.js","webpack://tkfmtools/./src/components/recruitment-filter/table-body.js","webpack://tkfmtools/./src/components/recruitment-filter/result-table.js","webpack://tkfmtools/./src/pages/enlist/filter.js"],"names":["StyledImg","styled","ImageSupplier","ImgWrapper","ImgCard","children","className","imgType","imgId","alt","isBackground","name","ItemImg","TextWrapper","ItemCard","id","itemString","useLanguage","StyledTable","Table","CardTable","striped","$striped","StyledCard","props","theme","colors","surface","TitleText","CharCard","charString","split","slice","join","ResponsiveCharCard","$textWrapConfig","TagWrapper","IconWrapper","secondary","CharTr","type","tag","attrIcons","attribute","AttributeIcon","position","PositionIcon","race","RaceIcon","body","BodysizeIcon","oppai","OppaiIcon","rank","RankIcon","else","ElseIcon","tags","CharAccordionDetail","charData","char","available","rest","Object","entries","map","entry","ind","key","tagWarnMsg","TableWrapper","Scrollable","$maxHeight","StyledSortableTable","SortableTable","data","head","sortFunc","defaultSortKey","handleModalOpen","maxHeight","headerEnd","pageString","title","items","drop","filter","resultTitle","withHelp","onClickHelp","end","border","TableHead","enlist","tableHead","item","CellWrapper","TableCell","onSurface","TableBody","sortedData","d","i","padding","CardRow","characters","character","rarity","CharacterImage","Card","dropdownHover","shadow","ResultTablePanel","filteredData","Header","stickyHeader","size","combinations","TagButtonGroup","value","onChange","layoutConfig","groupRange","ToggleButtonGroup","tagData","t","Array","range","keys","BtnGroupWrapper","AttributeChip","StyledChip","$lang","btnLayoutConfig","1400","1160","1000","768","580","0","1260","1080","550","355","1460","1250","1030","630","430","365","TagPanel","filterBtnValue","handleBtnGroupChange","groupBtnByClass","userLanguage","label","tagAttributes","v","StyledHeader","StyledSelect","Select","CharFilterPanel","clearBtnValue","enlistHour","handleEnlistHourChange","useState","minute","setMinute","tagSelectTitle","titleIcon","TagIcon","onClick","tooltipText","deleteTooltip","DeleteIcon","settingTooltip","SettingIcon","timeSelectTitle","ClockIcon","values","variant","inputProps","e","target","requestSort","getSortDirection","tableHeadByCharacter","attr","direction","DistinctCharacterTooltip","withStyles","tooltip","right","fontSize","whiteSpace","Tooltip","TagTooltip","texts","distinctTagCombs","comb","TransitionComponent","Zoom","placement","arrow","CharCardWrapper","StarIconWrapper","$hidden","undefined","cardTextWrapConfig","length","StarIcon","appliedTags","StyledModal","ScrollableModal","SettingModal","open","onClose","filterLayout","resultLayout","handleLayoutChange","settingModal","ariaLabelledby","ariaDescribedby","RadioGroup","groupLabel","labels","handleChange","resultDisplay","resultLabels","elements","num","remaining","next","isHelpModalOpen","isSettingModalOpen","isSnackbarOpen","state","setState","useSwitch","window","innerWidth","btnLayout","layout","setBtnLayout","setLayout","setReslutLayout","availableCharacters","useMemo","elseTags","otherTags","useCallback","sortableItems","sortConfig","sort","a","b","aKey","bKey","sortedTags","dataLayer","push","result","Math","min","from","forEach","existedRarity","survivors","includes","rarityCheck","inputTags","every","score","1","2","3","c","charTagData","filteredChars","JSON","parse","stringify","appliedTagsNum","isExist","existChar","j","splice","handelHelpModal","boolean","handleSettingModal","Head","helmet","description","path","Panels","panelsWidth","groupIdx","event","val","newValue","groupValues","concat","indexOf","helpModal","content","Snackbar","message","snackbarMsg"],"mappings":"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","file":"component---src-pages-enlist-filter-js-96021c76948506d90d9c.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { useLanguage } from 'containers/LanguageProvider';\r\n\r\nimport ImageSupplier from 'components/ImageSupplier';\r\nimport Table from 'components/Table';\r\n\r\nconst StyledImg = styled(ImageSupplier)`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    background-repeat: no-repeat;\r\n`\r\nconst ImgWrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\nexport const ImgCard = ({\r\n    children,\r\n    className,\r\n    imgType,\r\n    imgId,\r\n    alt,\r\n    isBackground\r\n}) => (\r\n    isBackground\r\n        ? <StyledImg\r\n            className={className}\r\n            name={`${imgType}_${imgId}`}\r\n            isBackground\r\n            alt={alt}\r\n        >\r\n            {children}\r\n        </StyledImg>\r\n        : <ImgWrapper className={className}>\r\n            <StyledImg\r\n                name={`${imgType}_${imgId}`}\r\n                alt={alt}\r\n            />\r\n            {children}\r\n        </ImgWrapper>\r\n)\r\n\r\nconst ItemImg = styled(ImgCard)`\r\n    > div:first-child {\r\n        width: 2.5rem;\r\n        height: 2.5rem;\r\n        margin-right: .4rem;\r\n        user-select: none;\r\n    }\r\n`\r\nconst TextWrapper = styled.div`\r\n    white-space: nowrap;\r\n    font-size: medium;\r\n    font-weight: normal;\r\n`\r\nexport const ItemCard = ({\r\n    className,\r\n    id\r\n}) => {\r\n    const { itemString } = useLanguage()\r\n\r\n    return (\r\n        <ItemImg\r\n            className={className}\r\n            imgType='item'\r\n            imgId={id}\r\n            alt=''\r\n        >\r\n            <TextWrapper>\r\n                {itemString.name[id]}\r\n            </TextWrapper>\r\n        </ItemImg>\r\n    )\r\n}\r\n\r\nconst StyledTable = styled(Table)`\r\n    && .MuiTableCell-root  {\r\n        font-size: .9rem;\r\n        padding: .3rem;\r\n        padding-left: .75rem;\r\n    }\r\n`\r\nexport const CardTable = ({\r\n    className,\r\n    children,\r\n    striped\r\n}) => (\r\n    <StyledTable\r\n        className={className}\r\n        $striped={striped}\r\n    >\r\n        {children}\r\n    </StyledTable>\r\n)\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {\r\n    TableBody as MuiTableBody,\r\n    TableRow as MuiTableRow,\r\n    TableCell as MuiTableCell\r\n} from '@material-ui/core';\r\n\r\nimport { useLanguage } from 'containers/LanguageProvider';\r\n\r\nimport { ImgCard, CardTable } from 'components/Card';\r\nimport {\r\n    AttributeIcon,\r\n    PositionIcon,\r\n    RaceIcon,\r\n    BodysizeIcon,\r\n    OppaiIcon,\r\n    RankIcon,\r\n    ElseIcon,\r\n} from 'components/icon';\r\n\r\nimport charData from 'data/character.json';\r\n\r\nconst StyledCard = styled(ImgCard)`\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n    justify-content: space-around;\r\n    width: 100%;\r\n    min-width: 10rem;\r\n    height: 3.6rem;\r\n    background-repeat: no-repeat;\r\n    background-size: 6rem 6rem;\r\n    background-position: 0 -1.6rem;\r\n`\r\nconst TextWrapper = styled.div`\r\n    margin-left: 0;\r\n    margin-right: 1rem;\r\n    transition: all 0.3s ease;\r\n    text-transform: none;\r\n    text-shadow: 0 0 1px ${props => props.theme.colors.surface},\r\n    -2px 0 1px  ${props => props.theme.colors.surface},\r\n    2px 0 1px  ${props => props.theme.colors.surface},\r\n    0 -2px 1px ${props => props.theme.colors.surface},\r\n    0 2px 1px  ${props => props.theme.colors.surface},\r\n    2px 2px 1px ${props => props.theme.colors.surface},\r\n    2px -2px 1px ${props => props.theme.colors.surface},\r\n    -2px 2px 1px ${props => props.theme.colors.surface},\r\n    -2px -2px 1px ${props => props.theme.colors.surface};\r\n`\r\nconst TitleText = styled(TextWrapper)`\r\n    font-size: small;\r\n`\r\nconst CharCard = ({\r\n    className,\r\n    id\r\n}) => {\r\n    const { charString } = useLanguage()\r\n\r\n    return (\r\n        <StyledCard\r\n            className={className}\r\n            imgType='char_small'\r\n            imgId={id}\r\n            alt=''\r\n            isBackground\r\n        >\r\n            <TitleText>\r\n                {charString.name[id].split(' ').slice(0, -1).join(' ')}\r\n            </TitleText>\r\n            <TextWrapper>\r\n                {charString.name[id].split(' ').slice(-1)[0]}\r\n            </TextWrapper>\r\n        </StyledCard>\r\n    )\r\n}\r\n\r\nexport const ResponsiveCharCard = styled(CharCard)`\r\n    @media screen and (min-width: ${props => (\r\n        props.$textWrapConfig\r\n    )}px) {\r\n        flex-direction: row;\r\n        align-items: center;\r\n        justify-content: flex-start;\r\n        > div {\r\n            margin-left: 7rem\r\n        }\r\n        > div:last-child {\r\n            margin-left: -.6rem;\r\n        }\r\n    }\r\n`\r\n\r\nconst TagWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n`\r\nconst IconWrapper = styled.div`\r\n    margin-bottom: .1rem;\r\n    margin-left: .25rem;\r\n    margin-right: .4rem;\r\n    > svg {\r\n        width: 1.2rem;\r\n        fill: ${props => props.theme.colors.secondary};\r\n        color:  ${props => props.theme.colors.secondary};\r\n    }\r\n`\r\nconst CharTr = ({\r\n    type,\r\n    tag\r\n}) => {\r\n    const { charString } = useLanguage()\r\n\r\n    const attrIcons = {\r\n        attribute: AttributeIcon,\r\n        position: PositionIcon,\r\n        race: RaceIcon,\r\n        body: BodysizeIcon,\r\n        oppai: OppaiIcon,\r\n        rank: RankIcon,\r\n        else: ElseIcon\r\n    }\r\n\r\n    return (\r\n        <MuiTableRow>\r\n            <MuiTableCell>\r\n                <TagWrapper>\r\n                    <IconWrapper>\r\n                        {attrIcons[type]}\r\n                    </IconWrapper>\r\n                    {charString.tags[tag]}\r\n                </TagWrapper>\r\n            </MuiTableCell>\r\n        </MuiTableRow>\r\n    )\r\n}\r\n\r\nexport const CharAccordionDetail = ({ id }) => {\r\n    const { charString } = useLanguage()\r\n\r\n    const { tags } = charData.find(char => char.id === id)\r\n    const { available, ...rest } = tags\r\n\r\n    if (!available) {\r\n        return (\r\n            <CardTable striped>\r\n                <MuiTableBody>\r\n                    <MuiTableRow>\r\n                        <MuiTableCell>\r\n                            {charString.tagWarnMsg}\r\n                        </MuiTableCell>\r\n                    </MuiTableRow>\r\n                </MuiTableBody>\r\n            </CardTable>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <CardTable striped>\r\n            <MuiTableBody>\r\n                {Object.entries(rest).map((entry, ind) => (\r\n                    entry[0] === 'else'\r\n                        ? entry[1].map(tag => (\r\n                            <CharTr\r\n                                key={tag}\r\n                                type='else'\r\n                                tag={tag}\r\n                            />\r\n                        ))\r\n                        : entry[1] >= 0\r\n                            ? <CharTr\r\n                                key={entry[1]}\r\n                                type={entry[0]}\r\n                                tag={entry[1]}\r\n                            />\r\n                            : null\r\n                ))}\r\n            </MuiTableBody>\r\n        </CardTable>\r\n    )\r\n}\r\n\r\nexport default CharCard","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Scrollable from 'containers/Scrollable';\r\nimport { useLanguage } from 'containers/LanguageProvider';\r\n\r\nimport Header from 'components/Header';\r\nimport SortableTable from 'components/SortableTable';\r\n\r\nconst TableWrapper = styled(Scrollable)`\r\n    max-height: ${props => props.$maxHeight};\r\n    overflow-x: hidden;\r\n    overflow-y: auto;\r\n`\r\nconst StyledSortableTable = styled(SortableTable)`\r\n    img {\r\n        width: 1.8rem; height: 1.8rem;\r\n    }\r\n    td {\r\n        padding-left: .75rem;\r\n    }\r\n`\r\nconst ResultTablePanel = ({\r\n    data,\r\n    head,\r\n    body,\r\n    sortFunc,\r\n    defaultSortKey,\r\n    handleModalOpen,\r\n    maxHeight,\r\n    striped,\r\n    headerEnd,\r\n}) => {\r\n    const { pageString } = useLanguage()\r\n\r\n    return (<>\r\n        <Header\r\n            title={pageString.items.drop.filter.resultTitle}\r\n            withHelp\r\n            onClickHelp={handleModalOpen}\r\n            end={headerEnd}\r\n            border\r\n        />\r\n        <TableWrapper $maxHeight={maxHeight}>\r\n            <StyledSortableTable\r\n                data={data}\r\n                head={head}\r\n                body={body}\r\n                sortFunc={sortFunc}\r\n                defaultSortKey={defaultSortKey}\r\n                striped={striped}\r\n            />\r\n        </TableWrapper>\r\n    </>)\r\n}\r\n\r\nexport default ResultTablePanel","import React from \"react\";\r\nimport { useLanguage } from \"containers/LanguageProvider\";\r\nimport {\r\n  TableHead as MuiTableHead,\r\n  TableRow as MuiTableRow,\r\n  TableCell,\r\n} from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const TableHead = (props) => {\r\n  const { pageString } = useLanguage();\r\n\r\n  return (\r\n    <MuiTableHead>\r\n      <MuiTableRow>\r\n        {pageString.enlist.filter.tableHead.map((item, ind) => (\r\n          <CellWrapper key={ind}>{item.title}</CellWrapper>\r\n        ))}\r\n      </MuiTableRow>\r\n    </MuiTableHead>\r\n  );\r\n};\r\n\r\nconst CellWrapper = styled(TableCell)`\r\n  && {\r\n    background-color: ${(props) => props.theme.colors.surface};\r\n    color: ${(props) => props.theme.colors.onSurface};\r\n    user-select: none;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { useLanguage } from \"containers/LanguageProvider\";\r\n\r\nimport {\r\n  TableBody as MuiTableBody,\r\n  TableRow as MuiTableRow,\r\n  TableCell as MuiTableCell,\r\n} from \"@material-ui/core\";\r\n\r\nimport { ImgCard } from \"components/Card\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nexport const TableBody = ({ sortedData }) => {\r\n  const { charString } = useLanguage();\r\n\r\n  return (\r\n    <MuiTableBody>\r\n      {sortedData.map((d, i) => (\r\n        <MuiTableRow key={i}>\r\n          <MuiTableCell padding='none'>{i + 1}</MuiTableCell>\r\n          <MuiTableCell>\r\n            <TextWrapper>\r\n              {d.tags.map((i) => charString.tags[i]).join(\", \")}\r\n            </TextWrapper>\r\n          </MuiTableCell>\r\n          <MuiTableCell>\r\n            <CardRow>\r\n              {d.characters.map((character) => (\r\n                <Card rarity={character.rarity} key={character.id}>\r\n                  <CharacterImage\r\n                    rarity={character.rarity}\r\n                    imgType=\"char_small\"\r\n                    imgId={character.id}\r\n                    alt=\"\"\r\n                  />\r\n                  {charString.name[character.id].split(\" \").slice(-1)[0]}\r\n                </Card>\r\n              ))}\r\n            </CardRow>\r\n          </MuiTableCell>\r\n        </MuiTableRow>\r\n      ))}\r\n    </MuiTableBody>\r\n  );\r\n};\r\n\r\nconst TextWrapper = styled.span`\r\n  word-break: keep-all;\r\n  white-space: break-spaces;\r\n  @media screen and (max-width: 600px) {\r\n    font-size: small;\r\n  }\r\n`;\r\nconst CardRow = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst Card = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  height: 3rem;\r\n\r\n  padding: 1px 8px 1px 1px;\r\n  margin: 4px;\r\n\r\n  background-color:${props => props.theme.colors.dropdownHover + '40'};\r\n  box-shadow: 2px 2px 2px 1px ${props => props.theme.colors.dropdownHover + '80'};\r\n  border-radius: 3rem;\r\n  color: ${props => props.theme.colors.onSurface};\r\n\r\n  @media screen and (max-width: 600px) {\r\n    font-size: small;\r\n  }\r\n`;\r\n\r\nconst CharacterImage = styled(ImgCard)`\r\n  margin-right: 2px;\r\n  \r\n  > div:first-child {\r\n    width: 3rem;\r\n    height: 3rem;\r\n    border-radius: 100%;\r\n    border: 2.5px solid ${props =>\r\n    props.rarity < 2\r\n      ? props.theme.colors.shadow\r\n      : props.theme.colors.secondary};\r\n  }\r\n\r\n  img {\r\n    border: none;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Scrollable from \"containers/Scrollable\";\r\nimport { useLanguage } from \"containers/LanguageProvider\";\r\n\r\nimport Table from \"components/Table\";\r\n\r\nimport Header from 'components/Header';\r\nimport { TableHead } from \"./table-head\";\r\nimport { TableBody } from \"./table-body\";\r\n\r\nexport const ResultTablePanel = (props) => {\r\n  const { pageString } = useLanguage();\r\n  const { filteredData, handleModalOpen, maxHeight, striped } = props;\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        title={pageString.items.drop.filter.resultTitle}\r\n        withHelp\r\n        onClickHelp={handleModalOpen}\r\n        border\r\n      />\r\n      <TableWrapper $maxHeight={maxHeight}>\r\n        <StyledTable stickyHeader $striped={striped} size=\"small\">\r\n          <TableHead />\r\n          <TableBody sortedData={filteredData} />\r\n        </StyledTable>\r\n      </TableWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nconst TableWrapper = styled(Scrollable)`\r\n  max-height: ${(props) => props.$maxHeight};\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n  @media screen and (max-width: 1000px) {\r\n    overflow-y: hidden;\r\n  }\r\n`;\r\n\r\nconst StyledTable = styled(Table)`\r\n  td {\r\n    padding-left: 0.75rem;\r\n  }\r\n`;\r\n","import React, { useState, useMemo, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport {\r\n    TableHead as MuiTableHead,\r\n    TableBody as MuiTableBody,\r\n    TableRow as MuiTableRow,\r\n    TableCell as MuiTableCell,\r\n    Tooltip, Zoom\r\n} from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport useSwitch from 'hooks/useSwitch';\r\n\r\nimport Panels from 'containers/Panels';\r\nimport { useLanguage } from 'containers/LanguageProvider';\r\n\r\nimport { ResultTablePanel } from 'components/recruitment-filter';\r\nimport ResultTablePanelByCharacter from 'components/ResultTablePanel'\r\nimport Head from 'components/Head';\r\nimport { SortableTh } from 'components/SortableTable';\r\nimport Header from 'components/Header';\r\nimport { HeaderIconButton } from 'components/IconButton';\r\nimport { StyledChip } from 'components/Chip';\r\nimport ToggleButtonGroup, { ToggleButton } from 'components/ToggleButtonGroup';\r\nimport { Select } from 'components/Input';\r\nimport { ResponsiveCharCard } from 'components/CharCard';\r\nimport { ScrollableModal, TextModal } from 'components/Modal';\r\nimport RadioGroup, { Radio } from 'components/RadioGroup';\r\nimport Snackbar from 'components/Snackbar';\r\nimport {\r\n    DeleteIcon,\r\n    TagIcon,\r\n    ClockIcon,\r\n    AttributeIcon,\r\n    PositionIcon,\r\n    RaceIcon,\r\n    BodysizeIcon,\r\n    OppaiIcon,\r\n    RankIcon,\r\n    ElseIcon,\r\n    StarIcon,\r\n    SettingIcon\r\n} from 'components/icon';\r\n\r\nimport tagData from 'data/tag.json';\r\nimport charData from 'data/character.json';\r\n\r\nconst TagButtonGroup = ({\r\n    value,\r\n    onChange,\r\n    layoutConfig,\r\n    groupRange\r\n}) => {\r\n    const { charString } = useLanguage()\r\n\r\n    const attrIcons = {\r\n        attribute: AttributeIcon,\r\n        position: PositionIcon,\r\n        race: RaceIcon,\r\n        body: BodysizeIcon,\r\n        oppai: OppaiIcon,\r\n        rank: RankIcon,\r\n        else: ElseIcon\r\n    }\r\n\r\n    return (\r\n        <ToggleButtonGroup\r\n            value={value}\r\n            onChange={onChange}\r\n            layoutConfig={layoutConfig}\r\n        >\r\n            {tagData.slice(groupRange[0], groupRange[1]).map(t =>\r\n                [...Array(t.range[1]).keys()].slice(t.range[0]).map(id => (\r\n                    <ToggleButton\r\n                        value={id}\r\n                        key={id}\r\n                    >\r\n                        {attrIcons[t.type]}\r\n                        {charString.tags[id]}\r\n                    </ToggleButton>\r\n                ))\r\n            )}\r\n        </ToggleButtonGroup>\r\n    )\r\n}\r\n\r\nconst BtnGroupWrapper = styled.div`\r\n    position: relative;\r\n    padding: .5rem;\r\n    padding-top: .8rem;\r\n    margin: 1rem 0;\r\n    border-radius: .25rem;\r\n    border: 1px solid ${props => props.theme.colors.secondary};\r\n    background-color: ${props => props.theme.colors.surface};\r\n`\r\nconst AttributeChip = styled(StyledChip)`\r\n    && {\r\n        position: absolute;\r\n        z-index: 1;\r\n        top: -.6rem;\r\n        width: ${props => props.$lang === 'en' ? '4.5rem' : 'auto'};\r\n        background-color: brown;\r\n        color: white;\r\n    }\r\n`\r\nconst btnLayoutConfig = {\r\n    'en': {\r\n        1400: 5,\r\n        1160: 4,\r\n        1000: 3,\r\n        768: 4,\r\n        580: 3,\r\n        0: 2\r\n    },\r\n    'zh-TW': {\r\n        1260: 6,\r\n        1080: 5,\r\n        1000: 4,\r\n        768: 5,\r\n        550: 4,\r\n        355: 3,\r\n        0: 2\r\n    },\r\n    'ja': {\r\n        1460: 6,\r\n        1250: 5,\r\n        1030: 4,\r\n        1000: 3,\r\n        768: 5,\r\n        630: 4,\r\n        430: 3,\r\n        0: 2\r\n    },\r\n    'ko': {\r\n        1260: 6,\r\n        768: 5,\r\n        550: 4,\r\n        365: 3,\r\n        0: 2\r\n    }\r\n}\r\n\r\nconst TagPanel = ({\r\n    filterBtnValue,\r\n    handleBtnGroupChange,\r\n    groupBtnByClass\r\n}) => {\r\n    const { userLanguage, charString } = useLanguage()\r\n\r\n    return (\r\n        <div>\r\n            {groupBtnByClass\r\n                ? tagData.map((t, ind) => (\r\n                    <BtnGroupWrapper key={ind}>\r\n                        <AttributeChip label={charString.tagAttributes[t.type]} $lang={userLanguage} />\r\n                        <TagButtonGroup\r\n                            value={filterBtnValue.filter(v => v >= t.range[0] && v < t.range[1])}\r\n                            onChange={handleBtnGroupChange(ind)}\r\n                            layoutConfig={btnLayoutConfig[userLanguage]}\r\n                            groupRange={[ind, ind + 1]}\r\n                        />\r\n                    </BtnGroupWrapper>\r\n                ))\r\n                : <BtnGroupWrapper>\r\n                    <TagButtonGroup\r\n                        value={filterBtnValue}\r\n                        onChange={handleBtnGroupChange()}\r\n                        layoutConfig={btnLayoutConfig[userLanguage]}\r\n                        groupRange={[0, 7]}\r\n                    />\r\n                </BtnGroupWrapper>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst StyledHeader = styled(Header)`\r\n    padding-bottom: .4rem;\r\n`\r\nconst IconWrapper = styled.div`\r\n    svg {\r\n        width: 1.2rem;\r\n        height: 1.2rem;\r\n        margin-right: .4rem;\r\n        margin-bottom: .2rem;\r\n        fill: ${props => props.theme.colors.onSurface};\r\n        color: ${props => props.theme.colors.onSurface};\r\n    }\r\n`\r\nconst StyledSelect = styled(Select)`\r\n    && > div > div {\r\n        padding-right: 1.4rem;\r\n    }\r\n`\r\nconst CharFilterPanel = ({\r\n    clearBtnValue,\r\n    filterBtnValue,\r\n    enlistHour,\r\n    handleBtnGroupChange,\r\n    handleEnlistHourChange,\r\n    handleModalOpen,\r\n    groupBtnByClass\r\n}) => {\r\n    const { pageString } = useLanguage()\r\n\r\n    const [minute, setMinute] = useState('00')\r\n\r\n    return (<>\r\n        <Header\r\n            title={pageString.enlist.filter.tagSelectTitle}\r\n            titleIcon={TagIcon}\r\n            end={\r\n                <>\r\n                    <HeaderIconButton\r\n                        onClick={clearBtnValue}\r\n                        tooltipText={pageString.enlist.filter.deleteTooltip}\r\n                    >\r\n                        {DeleteIcon}\r\n                    </HeaderIconButton>\r\n                    <HeaderIconButton\r\n                        onClick={handleModalOpen}\r\n                        tooltipText={pageString.enlist.filter.settingTooltip}\r\n                    >\r\n                        {SettingIcon}\r\n                    </HeaderIconButton>\r\n                </>\r\n            }\r\n            border\r\n        />\r\n        <TagPanel\r\n            filterBtnValue={filterBtnValue}\r\n            handleBtnGroupChange={handleBtnGroupChange}\r\n            groupBtnByClass={groupBtnByClass}\r\n        />\r\n        <StyledHeader\r\n            title={pageString.enlist.filter.timeSelectTitle}\r\n            titleIcon={ClockIcon}\r\n            border\r\n        />\r\n        <StyledSelect\r\n            values={[...Array(10).keys()].slice(1)}\r\n            value={enlistHour}\r\n            variant='outlined'\r\n            size='small'\r\n            inputProps={{ 'aria-label': 'recruitment-hour' }}\r\n            onChange={handleEnlistHourChange}\r\n        />\r\n        {'：'}\r\n        <StyledSelect\r\n            values={['00', '10', '20', '30', '40', '50']}\r\n            value={minute}\r\n            variant='outlined'\r\n            size='small'\r\n            inputProps={{ 'aria-label': 'recruitment-minute' }}\r\n            onChange={e => setMinute(e.target.value)}\r\n        />\r\n    </>)\r\n}\r\n\r\nconst TableHead = ({ requestSort, getSortDirection }) => {\r\n    const { pageString } = useLanguage()\r\n\r\n    return (\r\n        <MuiTableHead>\r\n            <MuiTableRow>\r\n                {pageString.enlist.filter.tableHeadByCharacter\r\n                    .map((item, ind) => (\r\n                        <SortableTh\r\n                            key={ind}\r\n                            onClick={() => requestSort(item.attr)}\r\n                            direction={getSortDirection(item.attr)}\r\n                        >\r\n                            {item.title}\r\n                        </SortableTh>\r\n                    ))}\r\n            </MuiTableRow>\r\n        </MuiTableHead>\r\n    )\r\n}\r\n\r\nconst DistinctCharacterTooltip = withStyles({\r\n    tooltip: {\r\n        right: '0',\r\n        fontSize: '1rem',\r\n        whiteSpace: 'pre'\r\n    }\r\n})(Tooltip)\r\n\r\nconst TagTooltip = ({ children, char }) => {\r\n    const { charString } = useLanguage()\r\n\r\n    const texts = char.distinctTagCombs\r\n        .map(comb => comb.map(i => charString.tags[i]).join(', '))\r\n        .join('\\n')\r\n\r\n    return (\r\n        <DistinctCharacterTooltip\r\n            title={texts}\r\n            TransitionComponent={Zoom}\r\n            placement='bottom'\r\n            arrow\r\n        >\r\n            {children}\r\n        </DistinctCharacterTooltip >\r\n    )\r\n}\r\n\r\nconst CharCardWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    margin-left: -.75rem;\r\n    width: max-content;\r\n`\r\nconst StarIconWrapper = styled(IconWrapper)`\r\n    display: flex;\r\n    ${props => props.$hidden ? 'visibility: hidden;' : undefined}\r\n    align-items: center;\r\n    svg {\r\n        width: 1.2rem;\r\n        height: 1.2rem;\r\n        margin: 0;\r\n        margin-left: -.6rem;\r\n    }\r\n`\r\nconst parseRarity = (rarity) => (\r\n    rarity === 0 ? 'N'\r\n        : rarity === 1 ? 'R'\r\n            : rarity === 2 ? 'SR'\r\n                : 'SSR'\r\n)\r\n\r\nconst cardTextWrapConfig = {\r\n    'zh-TW': 1360,\r\n    'en': 1360,\r\n    'ja': 1460,\r\n    'ko': 1360,\r\n}\r\n\r\nfunction TableBody({ sortedData }) {\r\n    const { userLanguage, charString } = useLanguage()\r\n\r\n    return (\r\n        <MuiTableBody>\r\n            {sortedData.map(char => (\r\n                <MuiTableRow key={char.id}>\r\n                    <MuiTableCell>\r\n                        <TagTooltip char={char}>\r\n                            <CharCardWrapper>\r\n                                <ResponsiveCharCard\r\n                                    id={char.id}\r\n                                    $textWrapConfig={\r\n                                        cardTextWrapConfig[userLanguage]\r\n                                    }\r\n                                />\r\n                                <StarIconWrapper\r\n                                    $hidden={char.distinctTagCombs.length === 0}\r\n                                >\r\n                                    {StarIcon}\r\n                                </StarIconWrapper>\r\n                            </CharCardWrapper>\r\n                        </TagTooltip>\r\n                    </MuiTableCell>\r\n                    <MuiTableCell>{parseRarity(char.rarity)}</MuiTableCell>\r\n                    <MuiTableCell>\r\n                        {char.appliedTags\r\n                            .map(i => charString.tags[i]).join(', ')}\r\n                    </MuiTableCell>\r\n                </MuiTableRow>\r\n            ))}\r\n        </MuiTableBody>\r\n    )\r\n}\r\n\r\nconst StyledModal = styled(ScrollableModal)`\r\n    > div:nth-child(3) {\r\n        top: 25%;\r\n        width: 30%;\r\n        min-width: max-content;\r\n    }\r\n`\r\nconst SettingModal = ({\r\n    open,\r\n    onClose,\r\n    filterLayout,\r\n    resultLayout,\r\n    handleLayoutChange\r\n}) => {\r\n    const { pageString } = useLanguage()\r\n\r\n    return (\r\n        <StyledModal\r\n            title={pageString.enlist.filter.settingModal.title}\r\n            open={open}\r\n            onClose={onClose}\r\n            ariaLabelledby='setting-modal-title'\r\n            ariaDescribedby='setting-modal-description'\r\n        >\r\n            <RadioGroup\r\n                label={pageString.enlist.filter.settingModal.groupLabel}\r\n                value={pageString.enlist.filter.settingModal.labels[filterLayout]}\r\n                handleChange={handleLayoutChange('filter')}\r\n            >\r\n                {pageString.enlist.filter.settingModal\r\n                    .labels.map(label => (\r\n                        <Radio label={label} value={label} key={label} />\r\n                    ))}\r\n            </RadioGroup>\r\n            <RadioGroup\r\n                label={pageString.enlist.filter.settingModal.resultDisplay}\r\n                value={pageString.enlist.filter.settingModal.resultLabels[resultLayout]}\r\n                handleChange={handleLayoutChange('result')}\r\n            >\r\n                {pageString.enlist.filter.settingModal\r\n                    .resultLabels.map(label => (\r\n                        <Radio label={label} value={label} key={label} />\r\n                    ))}\r\n            </RadioGroup>\r\n        </StyledModal>\r\n    )\r\n}\r\n\r\nfunction* combinations(elements, num) {\r\n    for (let i = 0; i < elements.length; i++) {\r\n        if (num === 1)\r\n            yield [elements[i]]\r\n        else {\r\n            const remaining = combinations(\r\n                elements.slice(i + 1, elements.length),\r\n                num - 1\r\n            )\r\n            for (let next of remaining)\r\n                yield [elements[i], ...next]\r\n        }\r\n    }\r\n}\r\n\r\n// check if every input tags are in target tags\r\nconst checkTags = (inputTags, targetTags) =>\r\n    targetTags.every((v) => inputTags.includes(v));\r\n\r\n// calculate priority score\r\nconst calculateScore = (characters) => {\r\n    // 3 - SSR, 2 - SR, 1 - R, 0 - N\r\n    const existedRarity = {\r\n        0: false,\r\n        1: false,\r\n        2: false,\r\n        3: false,\r\n    };\r\n\r\n    characters.forEach((c) => {\r\n        existedRarity[c.rarity] = true;\r\n    });\r\n\r\n    // SSR (for Leader tag only)\r\n    if (existedRarity[3]) return 3;\r\n\r\n    if (existedRarity[0]) {\r\n        if (existedRarity[2]) {\r\n            // N, R, and SR\r\n            if (existedRarity[1]) {\r\n                return 0.75;\r\n            }\r\n            // N and SR\r\n            return 0.5;\r\n        }\r\n        // N and R\r\n        if (existedRarity[1]) return 0.25;\r\n        // only N\r\n        return 0;\r\n    }\r\n\r\n    if (existedRarity[1]) {\r\n        // R and SR\r\n        if (existedRarity[2]) return 1.5;\r\n\r\n        // only R\r\n        return 1;\r\n    }\r\n\r\n    // only SR\r\n    return 2;\r\n};\r\n\r\nconst Filter = () => {\r\n    const [state, setState] = useState({\r\n        filterBtnValue: [],\r\n        enlistHour: '9',\r\n        isHelpModalOpen: false,\r\n        isSettingModalOpen: false,\r\n        isSnackbarOpen: false,\r\n    })\r\n\r\n    const { layout: btnLayout, setLayout: setBtnLayout } = useSwitch(\r\n        'group-btns-by-class',\r\n        [0, 1],\r\n        (typeof window === 'undefined' || window.innerWidth <= 1000) ? 1 : 0\r\n    )\r\n\r\n    const { layout: resultLayout, setLayout: setReslutLayout } = useSwitch(\r\n        'show-filter-result-by',\r\n        [0, 1],\r\n        0\r\n    )\r\n\r\n    const { pageString, charString } = useLanguage()\r\n\r\n    // get data from json only once (empty dependency), they are character available for recruiting\r\n    const availableCharacters = useMemo(() => charData\r\n        .filter((char) => char.tags.available)\r\n        .map((char) => {\r\n            const { id, rarity, tags } = char;\r\n            const { else: elseTags, ...otherTags } = tags;\r\n            return {\r\n                id,\r\n                rarity,\r\n                tags: [...Object.values(otherTags), ...elseTags],\r\n            };\r\n        }), [])\r\n\r\n    const sortFunc = useCallback((sortableItems, sortConfig) => {\r\n        sortableItems.sort((a, b) => {\r\n            let aKey\r\n            let bKey\r\n            if (sortConfig.key === 'appliedTags') {\r\n                aKey = a[sortConfig.key].join('')\r\n                bKey = b[sortConfig.key].join('')\r\n            } else if (sortConfig.key === 'name') {\r\n                aKey = charString.name[a.id]\r\n                bKey = charString.name[b.id]\r\n            } else {\r\n                aKey = a[sortConfig.key]\r\n                bKey = b[sortConfig.key]\r\n            }\r\n            if (aKey < bKey) {\r\n                return sortConfig.direction === 'asc' ? -1 : 1\r\n            }\r\n            if (aKey > bKey) {\r\n                return sortConfig.direction === 'asc' ? 1 : -1\r\n            }\r\n            return 0\r\n        })\r\n    }, [charString])\r\n\r\n    const filteredData = useMemo(() => {\r\n        if (state.filterBtnValue.length === 0)\r\n            return []\r\n\r\n        const sortedTags = [...state.filterBtnValue].sort()\r\n\r\n        if (dataLayer && sortedTags.length === 5) {\r\n            dataLayer.push({\r\n                'event': 'five_tags_selected',\r\n                'character_tag_combination': sortedTags,\r\n            })\r\n        }\r\n\r\n        // 0 -> Filter and display by character, 1 -> Filter and group by tags\r\n        if (resultLayout === 1) {\r\n            // type = Array<string, { tags: Array<number>, characters: { id: string, rarity: number, tags: Array<number> }, score: number }>\r\n            const result = [];\r\n\r\n            // max length of combination is 3\r\n            const combinationLength = Math.min(sortedTags.length, 3);\r\n\r\n            for (let i = combinationLength; i > 0; i--) {\r\n                const tagCombination = Array.from(combinations(sortedTags, i));\r\n\r\n                tagCombination.forEach((tags) => {\r\n                    // shallow copy is enough as we didn't change anything in object\r\n                    let survivors = [...availableCharacters];\r\n\r\n                    // rarity filtering\r\n                    // 20 -> Leader Tag\r\n                    if (!tags.includes(20)) {\r\n                        // 19 -> Elite Tag\r\n                        const rarityCheck = state.enlistHour < 4 && !tags.includes(19) ? 2 : 3;\r\n                        survivors = survivors.filter((char) => char.rarity < rarityCheck);\r\n                    }\r\n\r\n                    // tags filtering\r\n                    survivors = survivors.filter((d) => checkTags(d.tags, tags));\r\n\r\n                    // put data into result\r\n                    if (survivors.length > 0) {\r\n                        result.push({\r\n                            tags,\r\n                            characters: survivors,\r\n                            score: calculateScore(survivors),\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n\r\n            // return the sorted data by score\r\n            return result.sort((a, b) => b.score - a.score);\r\n        } else {\r\n            // filter characters by query tags\r\n            let charTagData = charData.filter(char => char.tags.available)\r\n            charTagData = charTagData.map((char => {\r\n                const { id, rarity, tags } = char\r\n                return ({ id, rarity, ...tags })\r\n            }))\r\n\r\n            let filteredChars = []\r\n            for (let i = sortedTags.length; i > 0; i--) {\r\n                // generate combinations\r\n                const tagCombs = Array.from(combinations(sortedTags, i))\r\n                // screen out ineligible characters\r\n                tagCombs.forEach(tags => {\r\n                    // filter by rank and time\r\n                    let survivors = JSON.parse(JSON.stringify(charTagData))\r\n                    if (!tags.includes(20)) {\r\n                        survivors = survivors.filter(char => char.rarity < 3)\r\n                        if (state.enlistHour < 4 && !tags.includes(19)) {\r\n                            survivors = survivors.filter(char => char.rarity < 2)\r\n                        }\r\n                    }\r\n                    // filter by tags\r\n                    let appliedTagsNum = 0\r\n                    tagData.forEach(t => {\r\n                        if (appliedTagsNum === tags.length || survivors.length === 0) {\r\n                            return false\r\n                        }\r\n\r\n                        [...Array(t.range[1]).keys()].slice(t.range[0]).forEach(id => {\r\n                            if (tags.includes(id)) {\r\n                                appliedTagsNum++\r\n                                survivors = id < 21\r\n                                    ? survivors.filter(c => c[t.type] === id)\r\n                                    : survivors.filter(c => c[t.type].includes(id))\r\n                            }\r\n                        })\r\n                    })\r\n                    // whether any three (or fewer) tags can lead to only one characters\r\n                    if (survivors.length === 1 && appliedTagsNum <= 3) {\r\n                        let isExist = false\r\n                        filteredChars.forEach(existChar => {\r\n                            if (existChar.id === survivors[0].id) {\r\n                                isExist = true\r\n                                for (\r\n                                    let j = existChar.distinctTagCombs.length - 1;\r\n                                    j >= 0;\r\n                                    j--\r\n                                ) {\r\n                                    if (\r\n                                        tags.every(t => existChar.distinctTagCombs[j].includes(t))\r\n                                    ) {\r\n                                        existChar.distinctTagCombs.splice(j, 1)\r\n                                    }\r\n                                }\r\n                                existChar.distinctTagCombs.push(tags)\r\n                                return false\r\n                            }\r\n                        })\r\n                        if (!isExist) {\r\n                            filteredChars.push({\r\n                                id: survivors[0].id,\r\n                                rarity: survivors[0].rarity,\r\n                                attribute: survivors[0].attribute,\r\n                                position: survivors[0].position,\r\n                                appliedTags: tags,\r\n                                distinctTagCombs: [tags]\r\n                            })\r\n                        }\r\n                    } else {\r\n                        survivors.forEach(char => {\r\n                            let isExist = false\r\n                            filteredChars.forEach(existChar => {\r\n                                if (existChar.id === char.id) {\r\n                                    isExist = true\r\n                                    return false\r\n                                }\r\n                            })\r\n                            if (!isExist) {\r\n                                filteredChars.push({\r\n                                    id: char.id,\r\n                                    rarity: char.rarity,\r\n                                    attribute: char.attribute,\r\n                                    position: char.position,\r\n                                    appliedTags: tags,\r\n                                    distinctTagCombs: []\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n            return filteredChars\r\n        }\r\n    }, [state.filterBtnValue, state.enlistHour, resultLayout])\r\n\r\n    const handleEnlistHourChange = (event) => {\r\n        setState((state) => ({\r\n            ...state,\r\n            enlistHour: event.target.value\r\n        }))\r\n    }\r\n\r\n    const handleBtnGroupChange = (groupIdx) => (event, val) => {\r\n        let newValue\r\n        if (typeof (groupIdx) !== 'undefined') {\r\n            const groupValues = tagData.map(t =>\r\n                state.filterBtnValue.filter(v => v >= t.range[0] && v < t.range[1])\r\n            )\r\n            groupValues[groupIdx] = val\r\n            newValue = [].concat(...groupValues)\r\n        } else {\r\n            newValue = val\r\n        }\r\n\r\n        if (newValue.length > 5) {\r\n            setState((state) => ({\r\n                ...state,\r\n                isSnackbarOpen: true\r\n            }))\r\n            return\r\n        }\r\n\r\n        setState((state) => ({\r\n            ...state,\r\n            filterBtnValue: newValue\r\n        }))\r\n    }\r\n\r\n    const clearBtnValue = () => {\r\n        setState((state) => ({\r\n            ...state,\r\n            filterBtnValue: []\r\n        }))\r\n    }\r\n\r\n    const handelHelpModal = (boolean) => () => {\r\n        setState((state) => ({\r\n            ...state,\r\n            isHelpModalOpen: boolean,\r\n        }))\r\n    }\r\n\r\n    const handleSettingModal = (boolean) => () => {\r\n        setState((state) => ({\r\n            ...state,\r\n            isSettingModalOpen: boolean,\r\n        }))\r\n    }\r\n\r\n    const handleLayoutChange = (key) => (event) => {\r\n        setState((state) => ({\r\n            ...state,\r\n            isSettingModalOpen: false,\r\n        }))\r\n\r\n        if (key === 'filter') {\r\n            setBtnLayout(\r\n                pageString.enlist.filter.settingModal.labels\r\n                    .indexOf(event.target.value)\r\n            )\r\n        } else if (key === 'result') {\r\n            setReslutLayout(\r\n                pageString.enlist.filter.settingModal.resultLabels\r\n                    .indexOf(event.target.value)\r\n            )\r\n        }\r\n    }\r\n\r\n    const handleSnackbarClose = () => {\r\n        setState((state) => ({\r\n            ...state,\r\n            isSnackbarOpen: false,\r\n        }))\r\n    }\r\n\r\n    return (<>\r\n        <Head\r\n            title={pageString.enlist.filter.helmet.title}\r\n            description={pageString.enlist.filter.helmet.description}\r\n            path='/enlist/filter/'\r\n        />\r\n        <Panels panelsWidth={['60%', '40%']}>\r\n            <CharFilterPanel\r\n                handleBtnGroupChange={handleBtnGroupChange}\r\n                clearBtnValue={clearBtnValue}\r\n                enlistHour={state.enlistHour}\r\n                handleEnlistHourChange={handleEnlistHourChange}\r\n                filterBtnValue={state.filterBtnValue}\r\n                handleModalOpen={handleSettingModal(true)}\r\n                groupBtnByClass={btnLayout === 0}\r\n            />\r\n            {resultLayout === 1 ? <ResultTablePanel\r\n                filteredData={filteredData}\r\n                handleModalOpen={handelHelpModal(true)}\r\n                maxHeight={btnLayout === 0 ? 'calc(100vh - 5rem)' : 'calc(100vh - 16rem)'}\r\n                striped\r\n            /> : <ResultTablePanelByCharacter\r\n                data={filteredData}\r\n                head={<TableHead />}\r\n                body={<TableBody />}\r\n                sortFunc={sortFunc}\r\n                defaultSortKey='rarity'\r\n                handleModalOpen={handelHelpModal(true)}\r\n                maxHeight={btnLayout === 0 ? 'calc(100vh - 5rem)' : 'calc(100vh - 16rem)'}\r\n                striped\r\n            />}\r\n\r\n        </Panels>\r\n        <SettingModal\r\n            open={state.isSettingModalOpen}\r\n            onClose={handleSettingModal(false)}\r\n            filterLayout={btnLayout}\r\n            resultLayout={resultLayout}\r\n            handleLayoutChange={handleLayoutChange}\r\n        />\r\n        <TextModal\r\n            title={pageString.enlist.filter.helpModal.title}\r\n            open={state.isHelpModalOpen}\r\n            onClose={handelHelpModal(false)}\r\n            content={pageString.enlist.filter.helpModal.content}\r\n            ariaLabelledby='help-modal-title'\r\n            ariaDescribedby='help-modal-description'\r\n        />\r\n        <Snackbar\r\n            open={state.isSnackbarOpen}\r\n            onClose={handleSnackbarClose}\r\n            message={pageString.enlist.filter.snackbarMsg}\r\n            type='warn'\r\n        />\r\n    </>)\r\n}\r\n\r\nexport default Filter"],"sourceRoot":""}